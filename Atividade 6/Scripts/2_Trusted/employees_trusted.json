{
	"jobConfig": {
		"name": "employees_trusted",
		"description": "",
		"role": "arn:aws:iam::859900066986:role/LabRole",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "employees_trusted.py",
		"scriptLocation": "s3://aws-glue-assets-859900066986-us-east-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-08-31T02:21:10.653Z",
		"developerMode": true,
		"connectionsList": [
			"Mysql"
		],
		"temporaryDirectory": "s3://aws-glue-assets-859900066986-us-east-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-859900066986-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\r\nfrom awsglue.transforms import *\r\nfrom awsglue.utils import getResolvedOptions\r\nfrom pyspark.context import SparkContext\r\nfrom pyspark.sql.functions import col, row_number\r\nfrom pyspark.sql.window import Window\r\nfrom awsglue.context import GlueContext\r\nfrom awsglue.job import Job\r\n\r\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\r\n\r\nsc = SparkContext()\r\nglueContext = GlueContext(sc)\r\nspark = glueContext.spark_session\r\n\r\njob = Job(glueContext)\r\njob.init(args['JOB_NAME'], args)\r\n\r\nrds_url = \"jdbc:mysql://glassdoor-db.cluster-chklsxhwihzi.us-east-1.rds.amazonaws.com:3306/glassdoor-db\"\r\nrds_properties = {\r\n    \"user\": \"admin\",\r\n    \"password\": \"#EDCvfr45tgb\",\r\n    \"driver\": \"com.mysql.cj.jdbc.Driver\"\r\n}\r\n\r\ndf_target_table = spark.read.jdbc(url=rds_url, table=\"employees_raw\", properties=rds_properties)\r\n\r\ndf_target_table = (df_target_table.withColumn(\"reviews_count\", col(\"reviews_count\").cast(\"bigint\"))\r\n                                  .withColumn(\"culture_count\", col(\"culture_count\").cast(\"bigint\"))\r\n                                  .withColumn(\"salaries_count\", col(\"salaries_count\").cast(\"bigint\"))\r\n                                  .withColumn(\"benefits_count\", col(\"benefits_count\").cast(\"bigint\"))\r\n                                  .withColumn(\"Geral\", col(\"Geral\").cast(\"double\"))\r\n                                  .withColumn(\"cultura_e_valores\", col(\"cultura_e_valores\").cast(\"double\"))\r\n                                  .withColumn(\"diversidade_e_inclusao\", col(\"diversidade_e_inclusao\").cast(\"double\"))\r\n                                  .withColumn(\"qualidade_de_vida\", col(\"qualidade_de_vida\").cast(\"double\"))\r\n                                  .withColumn(\"alta_lideranca\", col(\"alta_lideranca\").cast(\"double\"))\r\n                                  .withColumn(\"remuneracao_e_beneficios\", col(\"remuneracao_e_beneficios\").cast(\"double\"))\r\n                                  .withColumn(\"oportunidades_de_carreira\", col(\"oportunidades_de_carreira\").cast(\"double\"))\r\n                                  .withColumn(\"chance_recomendacao_percentual\", col(\"chance_recomendacao_percentual\").cast(\"double\") / 100)\r\n                                  .withColumn(\"perspectiva_positiva_percentual\", col(\"perspectiva_positiva_percentual\").cast(\"double\") / 100))\r\n\r\ndf_target_table = (df_target_table.withColumnRenamed(\"employer_name\", \"EMPLOYER_NAME\")\r\n                                  .withColumnRenamed(\"reviews_count\", \"REVIEWS_COUNT\")\r\n                                  .withColumnRenamed(\"culture_count\", \"CULTURE_REVIEWS_COUNT\")\r\n                                  .withColumnRenamed(\"salaries_count\", \"SALARY_REVIEWS_COUNT\")\r\n                                  .withColumnRenamed(\"benefits_count\", \"BENEFIT_REVIEWS_COUNT\")\r\n                                  .withColumnRenamed(\"Geral\", \"OVERALL_RATING\")\r\n                                  .withColumnRenamed(\"cultura_e_valores\", \"CULTURE_RATING\")\r\n                                  .withColumnRenamed(\"diversidade_e_inclusao\", \"DIVERSITY_RATING\")\r\n                                  .withColumnRenamed(\"qualidade_de_vida\", \"LIFE_QUALITY_RATING\")\r\n                                  .withColumnRenamed(\"alta_lideranca\", \"HIGH_LEADERSHIP_RATING\")\r\n                                  .withColumnRenamed(\"remuneracao_e_beneficios\", \"SALARY_RATING\")\r\n                                  .withColumnRenamed(\"oportunidades_de_carreira\", \"CAREER_OPORTUNITY_RATING\")\r\n                                  .withColumnRenamed(\"chance_recomendacao_percentual\", \"RECOMMENDATION_CHANCE\")\r\n                                  .withColumnRenamed(\"perspectiva_positiva_percentual\", \"POSITIVE_PERSPECTIVE\")\r\n                                  .withColumnRenamed(\"Nome\", \"INSTITUTION_NAME\"))\r\n\r\nwindow_clause = Window.partitionBy(\"INSTITUTION_NAME\").orderBy(col(\"REVIEWS_COUNT\").desc())\r\n\r\ndf_target_table = (df_target_table.withColumn(\"POSIT\", row_number().over(window_clause))\r\n                                  .filter(col(\"POSIT\") == 1))\r\n\r\ndf_target_table = df_target_table.drop(\"employer_website\", \"employer_headquarters\", \"employer_founded\", \"employer_industry\", \"employer_revenue\", \"url\", \"Segmento\", \"match_percent\", \"POSIT\")\r\n\r\ndf_target_table.write.jdbc(url=rds_url, table=\"employees_trusted\", mode=\"overwrite\", properties=rds_properties)\r\n\r\njob.commit()"
}