{
	"jobConfig": {
		"name": "export_parquet",
		"description": "",
		"role": "arn:aws:iam::859900066986:role/LabRole",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "export_parquet.py",
		"scriptLocation": "s3://aws-glue-assets-859900066986-us-east-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-09-01T16:38:27.469Z",
		"developerMode": true,
		"connectionsList": [
			"Mysql"
		],
		"temporaryDirectory": "s3://aws-glue-assets-859900066986-us-east-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-859900066986-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\r\nfrom awsglue.transforms import *\r\nfrom awsglue.utils import getResolvedOptions\r\nfrom pyspark.context import SparkContext\r\nfrom awsglue.context import GlueContext\r\nfrom awsglue.job import Job\r\n\r\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\r\nsc = SparkContext()\r\nglueContext = GlueContext(sc)\r\nspark = glueContext.spark_session\r\njob = Job(glueContext)\r\njob.init(args['JOB_NAME'], args)\r\n\r\ndatabase_name = \"glassdoor_data_catalog\"\r\ntables = [\"glassdoor_db_banks_raw\", \"glassdoor_db_banks_trusted\", \"glassdoor_db_complaints_raw\", \"glassdoor_db_complaints_trusted\", \"glassdoor_db_employees_raw\", \"glassdoor_db_employees_trusted\", \"glassdoor_db_reviews_complaints_delivery\"] \r\n\r\ns3_output_path_base = \"s3://edb011glassdoor/Tables/\"\r\n\r\nfor table_name in tables:\r\n    print(f\"Processando tabela: {table_name}\")\r\n    \r\n    datasource = glueContext.create_dynamic_frame.from_catalog(\r\n        database=database_name,\r\n        table_name=table_name,\r\n        transformation_ctx=f\"datasource_{table_name}\"\r\n    )\r\n    \r\n    dataframe = datasource.toDF()\r\n    \r\n    s3_output_path = f\"{s3_output_path_base}{table_name}/\"\r\n    \r\n    dataframe.write.parquet(s3_output_path)\r\n    \r\n    print(f\"Tabela {table_name} exportada para {s3_output_path}\")\r\n\r\njob.commit()\r\n"
}