{
	"jobConfig": {
		"name": "banks_trusted",
		"description": "",
		"role": "arn:aws:iam::859900066986:role/LabRole",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "banks_trusted.py",
		"scriptLocation": "s3://aws-glue-assets-859900066986-us-east-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-08-31T01:58:34.996Z",
		"developerMode": true,
		"connectionsList": [
			"Mysql"
		],
		"temporaryDirectory": "s3://aws-glue-assets-859900066986-us-east-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"observabilityMetrics": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-859900066986-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\r\nfrom awsglue.transforms import *\r\nfrom awsglue.utils import getResolvedOptions\r\nfrom pyspark.context import SparkContext\r\nfrom pyspark.sql.functions import col, lpad, regexp_replace, trim, length, row_number\r\nfrom pyspark.sql.window import Window\r\nfrom awsglue.context import GlueContext\r\nfrom awsglue.job import Job\r\n\r\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\r\n\r\nsc = SparkContext()\r\nglueContext = GlueContext(sc)\r\nspark = glueContext.spark_session\r\n\r\njob = Job(glueContext)\r\njob.init(args['JOB_NAME'], args)\r\n\r\nrds_url = \"jdbc:mysql://glassdoor-db.cluster-chklsxhwihzi.us-east-1.rds.amazonaws.com:3306/glassdoor-db\"\r\nrds_properties = {\r\n    \"user\": \"admin\",\r\n    \"password\": \"#EDCvfr45tgb\",\r\n    \"driver\": \"com.mysql.cj.jdbc.Driver\"\r\n}\r\n\r\ndf_target_table = spark.read.jdbc(url=rds_url, table=\"banks_raw\", properties=rds_properties)\r\n\r\ndf_target_table = (df_target_table.withColumn(\"CNPJ\", lpad(col(\"CNPJ\"), 14, \"0\"))\r\n                                  .withColumn(\"Nome\", trim(regexp_replace(col(\"Nome\"), \" - PRUDENCIAL\", \"\")))\r\n                                  .withColumnRenamed(\"Segmento\", \"SEGMENT\")\r\n                                  .withColumnRenamed(\"Nome\", \"INSTITUTION_NAME\"))\r\n\r\nwindow_clause = Window.partitionBy(\"CNPJ\").orderBy(length(col(\"INSTITUTION_NAME\")))\r\n\r\ndf_target_table = (df_target_table.withColumn(\"POSIT\", row_number().over(window_clause))\r\n                                  .filter(col(\"POSIT\") == 1)\r\n                                  .drop(\"POSIT\"))\r\n\r\ndf_target_table.write.jdbc(url=rds_url, table=\"banks_trusted\", mode=\"overwrite\", properties=rds_properties)\r\n\r\njob.commit()"
}